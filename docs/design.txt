Backend {
    Database curDbase;
    List<Database> databases;
    Answer { NONE, YES, YESALL, NO, NOALL } answer = NONE;
    Operation { NONE, ENTRY_ADD, ENTRY_DEL, ENTRY_COPY, ENTRY_MOVE, ENTRY_EDIT } curOp = NONE;
    String entryItem, entryDesc, targetName;
    List<Index> dbSelection;
}

ui {
    Dialog dbaseDialog;
}

// [WYNN_5]
ui::slot_database_addClicked() { 
    backend::dbaseEntryAdd();
}

backend::dbaseEntryAdd() {
    cleanupOperation();
    dbase || { signal_warning("Invalid dbase"); return; }
    curOp = ENTRY_ADD;
    signal_dbaseEntry("", "");
}

signal_warning(msg) -> ui::slot_backend_warning() {
    MsgBox::warning(msg);
}

signal_dbaseEntry(item, desc) -> ui::slot_backend_dbaseEntry() {
    dbaseDialog::open(item, desc);
}

ui::slot_entryDialog_accepted() {
    item.empty || desc.empty { MsgBox(); return; }
    backend::entry(item, desc);
}

ui::slot_entryDialog_rejected() {
    backend::answer(CANCEL);
}

backend::entry(item, desc) {
    entryItem = item;
    entryDesc = desc;
    continueOperation();
}

backend::continueOperation() {
    curOp == ENTRY_ADD: {
        answer == CANCEL: { cleanupOperation();Â return; }
        answer == YES || YESALL: dupIgnore = true;
        error = curDbase::add(entryItem, entryDesc, dupIgnore);
        error == DUPLICATE: { signal_question("Accept duplicate?", "blahblah", YES | NO | CANCEL); return; }
        cleanupOperation();
        signal_dbaseUpdated(idx);
        return;
    }
    curOp == ENTRY_DEL: {
        answer == YES: curDbase->remove(idxs);
        else: error();
        cleanupOperation();
    }
    curOp == ENTRY_COPY || ENTRY_MOVE: {
        db = databases(targetName);
        idx : dbSelection {
            answer == CANCEL: break;
            answer != NO: {
                answer == YES || YESALL: dupIgnore = true;
                entry = curDbase->entry(idx);
                error = db->add(entry, dupIgnore);
                error == DUPLICATE && answer != NO || NOALL: { // ask about duplicate unless already answered no
                    signal_question("Accept duplicate?", "blabla", YES | NO | YESALL | NOALL | CANCEL); 
                    return; // will retry same entry next time around
                }
                
                curOp == ENTRY_MOVE && error == OK: curDbase->remove(idx);
            }
            answer == YES || NO: answer = NONE; // yes/no answer good only for one iteration
            dbSelection->remove(idx);
        }
        cleanupOperation();
    }
    curOp == ENTRY_EDIT: {
        idx : dbSelection {
            entry = curDbase->entry(idx);
            signal_dbaseEntry(entry.item, entry.desc);
        }
    }
    else: error(); // no operation to continue
}

backend::cleanupOperation() {
    curOp = NONE;
    answer = NONE;
    entryItem = entryDesc = targetName = "";
    dbSelection.clear();
}

signal_question(title, msg, buttons) -> ui::slot_backend_question() {
    ans = MsgBox(title, msg, buttons);
    backend::answer(ans);
}

backend::answer(ans) {
    curOp == NONE || answer != NONE: {
        error(); // answer to unasked question or old answer not cleaned
    }
    answer = ans;
    continueOperation();
}

signal_dbaseUpdated(focus) -> ui::slot_backend_dbaseUpdated() {
    table::setFocus(),setSelection(focus);
}

// [WYNN_6]
ui::slot_database_removeClicked() {
    backend::dbaseEntryRemove(selection);
}

backend::dbaseEntryRemove(selection) {
    cleanupOperation();
    dbase || { ui::slot_backend_warning("Invalid dbase"); return; }
    curOp = ENTRY_DEL;
    dbSelection = selection;
    ui::slot_backend_question("Delete 123 item(s)?", "blabla", YES | NO);
}

// [WYNN_7]
ui::slot_database_copyClicked() {
    backend::dbaseEntryCopy(selection, false);
}

backend::dbaseEntryCopy(selection, move) {
    cleanupOperation();
    dbase || { ui::slot_backend_warning("Invalid dbase"); return; }
    move: curOp = ENTRY_MOVE else: curOp = ENTRY_COPY;
    dbSelection = selection;
    signal_selection("Select target", "blabla", dbNames)
}

 signal_selection -> ui::slot_backend_selection(title, msg, items) { 
    ans = InputDialog::select(title, msg, items);
    backend::target(ans);
}

backend::target(name) {
    targetName = name;
    continueOperation();
}

// [WYNN_8]
ui::slot_database_editClicked() {
    backend::dbaseEntryEdit(selection);
}

backend::dbaseEntryEdit(selection) {
    cleanupOperation();
    dbSelection = selection;
    dbase || { signal_warning("Invalid dbase"); return; }
    curOp = ENTRY_EDIT;
    signal_dbaseEntry(dbSelection.front());
}