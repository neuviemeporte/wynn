Backend:
    Database curDbase;
    List<Database> databases;
    Quiz quiz;
    Answer { NONE, YES, YESALL, NO, NOALL } answer = NONE;
    Operation { NONE, ENTRY_ADD, ENTRY_DEL, ENTRY_COPY, ENTRY_MOVE, ENTRY_EDIT, 
            ENTRY_FIND, QUIZ } curOp = NONE;
    String entryItem, entryDesc, itemName, text;
    List<Index> dbSelection;

ui:
    Dialog entryDialog;
    Dialog quizDialog;

// [WYNN_1.1]
ui::slot_database_changeCurrent(text)
    text.empty():
        disableDbaseWidgets();
    else:
        enableDbaseWidgets();
    backend.dbaseSwitch(text);

backend::dbaseSwitch(text):
    curDbase = databases(text);
    dbaseModel.setSource(curDbase);
    dbaseItemCount(entryCount) -> ui::slot_database_countUpdate();

ui::slot_database_countUpdate(count):
    spinbox.setMax(count);

// [WYNN_1.2]
ui::slot_database_createClicked():
    name = Dialog();
    name.empty() || !name.match(regex):
        MessageBox::warning();
        return;
    backend.dbaseCreate(name);

backend::dbaseCreate(name):
    name.empty():
        return;
    db <- databases:
        db.name == name:
            warning("Database exists");
            return;

    db = Database(name)
    databases.append(db);
    dbaseAdded(name) -> ui::slot_database_added();

ui::slot_database_added(name):
    slot_database_countUpdate(0);
    dbCombo.addItem(name),setCurrentText(name),setEnabled(true);

// [WYNN_1.3]
ui::slot_database_saveClicked()
    backend.dbaseSave();

backend::dbaseSave():
    curDbase.save();
    status("Saved to ...") -> ui::slot_backend_status();

ui::slot_backend_status(msg):
    statusBar.setText(msg);

// [WYNN_1.4]
ui::slot_database_deleteClicked():
    name = dbCombo.currentText();
    name.empty():
        return;
    MessageBox("You sure?") == YES:
        backend.dbaseDelete();

backend::dbaseDelete():
    checkCurrentDatabase():
        return;
    file = curDbase.path();
    file.remove();
    databases.remove(curDbase);
    delete curDbase;
    dbaseRemoved(name) -> ui::slot_database_removed();

ui::slot_database_removed(name):
    dbCombo.remove(name) -> ui::slot_database_changeCurrent();

// [WYNN_1.5]
ui::slot_database_addClicked():
    backend.dbaseEntryAdd();

backend::dbaseEntryAdd():
    !dbase:
        warning("Invalid dbase") -> ui::slot_backend_warning(); 
        return;
    cleanupOperation();
    curOp = ENTRY_ADD;
    dbaseEntry("", "") -> ui::slot_backend_dbaseEntry();

ui::slot_backend_warning(msg):
    MsgBox::warning(msg);

ui::slot_backend_dbaseEntry(item, desc):
    entryDialog.open(item, desc);

ui::slot_entryDialog_accepted():
    item.empty || desc.empty:
        MsgBox(); 
        return;
    backend.entry(item, desc);

ui::slot_entryDialog_rejected():
    backend.answer(CANCEL);

backend::entry(item, desc):
    entryItem = item;
    entryDesc = desc;
    continueOperation();

// TODO: do actual work on a worker thread?
backend::continueOperation():
    curOp == ENTRY_ADD:
        answer == NO: 
            cleanupOperation(); 
            return;
        answer == YES || YESALL: dupIgnore = true;
        error = curDbase.add(entryItem, entryDesc, dupIgnore);
        error == DUPLICATE: 
            question("Accept duplicate?", "blahblah", 
                    YES | NO) -> ui::slot_backend_question()
            return;
        dbaseUpdated(idx) -> ui::slot_backend_dbaseUpdated();
        return;
    curOp == ENTRY_DEL:
        answer == YES: 
            curDbase.remove(idxs);
        else: 
            error();

        dbaseUpdated(idx) -> ui::slot_backend_dbaseUpdated();
    curOp == ENTRY_COPY || ENTRY_MOVE
        target = databases(itemName);
        idx <- dbSelection:
            answer == CANCEL: break;
            answer != NO:
                answer == YES || YESALL: 
                    dupIgnore = true;
                entry = curDbase.entry(idx);
                error = target.add(entry, dupIgnore);
                // ask about duplicate unless already answered no
                handleDuplicate(target, error, entry): 
                    return; // will retry same entry next time around
                error == OK && curOp == ENTRY_MOVE: 
                    curDbase.remove(idx):
            answer == YES || NO: 
                answer = NONE; // yes/no answer good only for one iteration
            dbSelection.remove(idx);
    curOp == ENTRY_EDIT:
        answer == NO:
            return; // user canceled entry Dialog
        answer == YES:
            dupIgnore = true;
        alterIdx = dbSelection.front();
        error = curDbase.alter(alterIdx, entryItem, entryDesc);
        handleDuplicate(curDbase, error, entry):
            return;
        error != OK:
            return;
        answer == YES || NO: 
            answer = NONE; // yes/no answer good only for one iteration
        dbSelection.pop_front();
        !dbSelection.empty(): // let user edit next entry
            emit dbaseEntry(dbSelection.front())
    curOp == ENTRY_FIND:
        idx = dbSelection.front();
        found = curDbase.findEntry(text, idx);
        fond < 0:
            found = curDbase.findEntry(text, 0);
        found < 0:
            warning("Nothing found") -> ui::slot_backend_warning();
        dbaseFound(found) -> ui::slot_backend_dbaseEntryFound();
    else: 
        error(); // no operation to continue

backend::handleDuplicate(target, error, entry): 
    error != DUPLI || answer == NOALL:
        return;
    question("Accept duplicate?", entry, { YES | NO }) -> ui.slot_backend_question()

backend::cleanupOperation():
    curOp = NONE;
    answer = NONE;
    entryItem = entryDesc = itemName = "";
    dbSelection.clear();

ui::slot_backend_question(title, msg, buttons):
    ans = MsgBox(title, msg, buttons);
    backend.answer(ans);

backend::answer(ans):
    curOp == NONE || answer != NONE:
        error(); // answer to unasked question or old answer not cleaned
    answer = ans;
    continueOperation();

ui::slot_backend_dbaseUpdated(focus):
    table.setFocus(),setSelection(focus);

// [WYNN_1.6]
ui::slot_database_removeClicked():
    backend.dbaseEntryRemove(selection);

backend::dbaseEntryRemove(selection):
    !dbase || selection.empty():
        warning() -> ui::slot_backend_warning();
        return;
    cleanupOperation();
    curOp = ENTRY_DEL;
    dbSelection = selection;
    question("Delete 123 item(s)?", "blabla", YES | NO) 
        -> ui::slot_backend_question();

// [WYNN_1.7]
ui::slot_database_copyClicked():
ui::slot_database_moveClicked():
    backend.dbaseEntryCopy(selection, move);

backend::dbaseEntryCopy(selection, move):
    !dbase || selection.empty():
        warning() -> ui::slot_backend_warning();
        return;
    cleanupOperation();
    move: 
        curOp = ENTRY_MOVE 
    else: 
        curOp = ENTRY_COPY;
    dbSelection = selection;
    db <- databases && db != curDbase:
        dbNames += db.name();
    dbNames.empty():
        error("Nothing to copy/move to!") -> ui::slot_backend_error()
    item("Select target", "blabla", dbNames) -> ui::slot_backend_item();

ui::slot_backend_error(msg):
    MsgBox::critical(msg);

 ui::slot_backend_item(title, msg, items):
    ans = InputDialog::item(title, msg, items);
    backend.setItem(ans);

backend::setItem(name):
    name.empty():
        return;
    itemName = name;
    continueOperation();

// [WYNN_1.8]
ui::slot_database_editClicked():
    backend.dbaseEntryEdit(selection);

backend::dbaseEntryEdit(selection):
    !dbase || selection.empty():
        warning() -> ui::slot_backend_warning();
        return;
    cleanupOperation();
    dbSelection = selection;
    curOp = ENTRY_EDIT;
    dbaseEntry(dbSelection.front()) -> ui::slot_backend_dbaseEntry();

// [WYNN_1.9]
ui::slot_database_findClicked():
    backend.dbaseEntryFind(selection, expr);

backend::dbaseEntryFind(selection, expr):
    !dbase || selection.empty() || expr.empty():
        warning() -> ui::slot_backend_warning();
        return;
    cleanupOperation();
    dbSelection = selection;
    curOp = ENTRY_FIND;
    getText("Input string") -> ui::slot_backend_text();

ui::slot_backend_getText(title, msg):
    expr = DialogBox();
    backend.setText(expr);

backend::setText(str):
    text = str;
    continueOperation();

ui::slot_backend_dbaseEntryFound(found):
    table.select(found);

// [WYNN_1.10]
ui::slot_database_exportClicked():
    path = FileDialog();
    backend.dbaseExport(path);

backend::dbaseExport(path):
    !dbase:
        warning() -> ui::slot_backend_warning();
        return;
    curDbase.export(path);
    status(path) -> ui::slot_backend_status();

// [WYNN_1.11]
ui::slot_database_resetClicked():
    ans = Dialog("Are you sure?");
    ans == YES:
        backend.dbaseReset();

backend::dbaseReset():
    !dbase:
        warning() -> ui::slot_backend_warning();
        return;
    curDbase.reset();

// [WYNN_1.12]
ui::slot_database_quizClicked():
    // TODO: quiz item count from backend for settings?
    settings = getQuizSettings();
    backend.dbaseQuiz(settings);

backend::dbaseQuiz(settings):
    !dbase:
        warning() -> ui::slot_backend_warning();
        return;
    quiz = Quiz(curDbase, settings);
    quiz.empty():
        warning("No questions") -> ui::slot_backend_warning();
        return;
    curOp = QUIZ;
    curDbase.lock(); // disallow modification to dbase while quiz in progress
    quizQuestion(quiz.questionText(), quiz.answerText()) 
        -> ui::slot_database_quizQuestion();

ui::slot_quiz_question(q, a):
    quizDialog.setText(QUESTION, q);
    quizDialog.setText(ANSWER, a);
    quizDialog.setVisible(ANSWER, false);
    quizDialog.disableButtons(CORRECT | INCORRECT | UNSURE);
    quizDialog.enableButtons(REVEAL);

ui::slot_quiz_reveal():
    quizDialog.setVisible(ANSWER, true);
    quizDialog.enableButtons(CORRECT | INCORRECT | UNSURE);
    quizDialog.disableButtons(REVEAL);

ui::slot_quiz_correctClicked():
ui::slot_quiz_incorrectClicked():
ui::slot_quiz_unsureClicked():
    backend.quizAnswer(CORRECT | INCORRECT | UNSURE);

backend::quizAnswer(type);
    quiz.answer(type);
    quiz.done():
        quizDone() -> ui::slot_quiz_done();
        return;
    quizQuestion(quiz.questionText(), quiz.answerText()) 
        -> ui::slot_database_quizQuestion();

ui::slot_quiz_done():
    quizDialog.hide();
    backend.quizFinish(true);

backend.quizFinish(save):
    save:
        quiz.saveResults();
    delete quiz;

ui::slot_quiz_cancelClicked():
    ans = Dialog("Save partial results?");
    ans == CANCEL:
        return;
    quizDialog.hide();
    save = (ans == YES);
    backend.quizFinish(save);
