Backend {
    Database curDbase;
    List<Database> databases;
    Answer { NONE, YES, YESALL, NO, NOALL } answer = NONE;
    Operation { NONE, ENTRY_ADD, ENTRY_DEL, ENTRY_COPY, ENTRY_MOVE, ENTRY_EDIT } curOp = NONE;
    String entryItem, entryDesc, targetName;
    List<Index> dbSelection;
}

ui {
    Dialog dbaseDialog;
}

// [WYNN_5]
ui::slot_database_addClicked() { 
    backend::dbaseEntryAdd();
}

backend::dbaseEntryAdd() {
    cleanupOperation();
    if (!dbase) { emit warning("Invalid dbase") -> ui::slot_backend_warning(); return; }
    curOp = ENTRY_ADD;
    emit dbaseEntry("", "") -> ui::slot_backend_dbaseEntry()
}

ui::slot_backend_warning() {
    MsgBox::warning();
}

ui::slot_backend_dbaseEntry(item, desc) {
    dbaseDialog::open(item, desc);
}

ui::slot_entryDialog_accepted() {
    if (item.empty || desc.empty) { MsgBox(); return; }
    backend::entry(item, desc);
}

ui::slot_entryDialog_rejected() {
    backend::answer(CANCEL);
}

backend::entry(item, desc) {
    entryItem = item;
    entryDesc = desc;
    answer(YES);
}

backend::continueOperation() {
    if (curOp == ENTRY_ADD) {
        if (answer == CANCEL) { cleanupOperation();Â return; }
        dupIgnore = (answer == YES || YESALL);
        error = curDbase::add(entryItem, entryDesc, dupIgnore);
        if (error == DUPLICATE) 
            emit question("Accept duplicate?", "blahblah", YES | NO | CANCEL) -> ui::slot_backend_question();
        else { 
            emit dbaseEntryUpdated(idx) -> ui::slot_backend_dbaseUpdated(); 
            cleanupOperation();
        }
    }
    else if (curOp == ENTRY_DEL) {
        if (answer == YES) curDbase->remove(idxs);
        else if (answer == NO) cleanupOperation();
        else error();
    }
    else if (curOp == ENTRY_COPY || ENTRY_MOVE) {
        Database db = databases(targetName);
        for (idx : dbSelection) {
            if (answer == CANCEL) break;
            else if (answer != NO) {
                bool dupIgnore = (answer == YES || YESALL);
                entry = curDbase->entry(idx);
                error = db->add(entry, dupIgnore);
                if (error == DUPLICATE && answer != NO || NOALL) { // ask about duplicate unless already answered no
                    emit question("Accept duplicate?", "blabla", YES | NO | YESALL | NOALL | CANCEL); 
                    return; // will retry same entry next time around
                }
                if (curOp == ENTRY_MOVE && error == OK) curDbase->remove(idx);
            }
            if (answer == YES || NO) answer = NONE; // yes/no answer good only for one iteration
            dbSelection->remove(idx);
        }
        cleanupOperation();
    }
    else {
        error(); // no operation to process
    }
}

backend::cleanupOperation() {
    curOp = NONE;
    answer = NONE;
    entryItem = entryDesc = "";
    dbSelection.clear();
}

ui::slot_backend_question(title, msg, multi) {
    if (multi) buttons += YESALL NOALL;
    ans = MsgBox(title, msg, buttons);
    backend::answer(ans);
}

backend::answer(ans) {
    if (curOp == NONE || answer != NONE) {}
        error(); // answer to unasked question or old answer not cleaned
    }
    answer = ans;
    continueOperation();
}

ui::slot_backend_dbaseUpdated(int focus) {
    table::setFocus(),setSelection(focus)
}

// [WYNN_6]
ui::slot_database_removeClicked() {
    backend::dbaseEntryRemove(selection);
}

backend::dbaseEntryRemove(selection) {
    if (!checkOp()) return; // in the middle of another op
    if (!dbase) { emit warning("Invalid dbase") -> ui::slot_backend_warning(); return; }
    curOp = ENTRY_DEL;
    dbSelection = selection;
    emit question("Delete 123 item(s)?", "blabla", YES | NO) -> ui::slot_backend_question();
}

// [WYNN_7]
ui::slot_database_copyClicked() {
    backend::dbaseEntryCopy(selection, false);
}

backend::dbaseEntryCopy(selection, move) {
    cleanupOperation();
    if (!dbase) { emit warning("Invalid dbase") -> ui::slot_backend_warning(); return; }
    curOp = (move ? ENTRY_MOVE : ENTRY_COPY);
    dbSelection = selection;
    emit selection("Select target", "blabla", dbNames) -> ui::slot_backend_selection();
}

ui::slot_backend_selection(title, msg, items) {
    ans = InputDialog::select(title, msg, items);
    backend::target(ans);
}

backend::target(name) {
    targetName = name;
    continueOperation();
}

// [WYNN_8]
ui::slot_database_editClicked() {
    backend::dbaseEntryEdit(selection);
}